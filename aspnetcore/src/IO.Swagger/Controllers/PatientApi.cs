/*
 * Healthcare
 *
 * This is a API built for demo purpose. About patients and their treatment plan.
 *
 * OpenAPI spec version: 1.0.3
 * Contact: m.naseem@outlook.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PatientApiController : ControllerBase
    { 
        /// <summary>
        /// adds a patient to the list
        /// </summary>
        /// <remarks>Adds a patient to the system</remarks>
        /// <param name="authorization"></param>
        /// <param name="body">Add Patient to list</param>
        /// <response code="201">patient added</response>
        /// <response code="400">invalid input, object invalid</response>
        /// <response code="409">patient already exists</response>
        [HttpPost]
        [Route("/Tonic.Tims/Healthcare/1.0.0/patient")]
        [ValidateModelState]
        [SwaggerOperation("AddPatient")]
        public virtual IActionResult AddPatient([FromHeader][Required()]string authorization, [FromBody]Patient body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            throw new NotImplementedException();
        }

        /// <summary>
        /// deletes a patient from list
        /// </summary>
        /// <remarks>Deletes a patient from the list</remarks>
        /// <param name="authorization"></param>
        /// <param name="patientId">Patient id to delete</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Patient not found</response>
        [HttpDelete]
        [Route("/Tonic.Tims/Healthcare/1.0.0/patient")]
        [ValidateModelState]
        [SwaggerOperation("DeletePatient")]
        public virtual IActionResult DeletePatient([FromHeader][Required()]string authorization, [FromQuery][Required()]string patientId)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Finds patient by id
        /// </summary>
        /// <remarks>By passing in the appropriate options, you can search for the patient in the database </remarks>
        /// <param name="authorization"></param>
        /// <param name="patientId">pass the patientId for looking up the database</param>
        /// <response code="200">search result matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/Tonic.Tims/Healthcare/1.0.0/patient")]
        [ValidateModelState]
        [SwaggerOperation("FindPatient")]
        [SwaggerResponse(statusCode: 200, type: typeof(Patient), description: "search result matching criteria")]
        public virtual IActionResult FindPatient([FromHeader][Required()]string authorization, [FromQuery]int? patientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Patient));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"Lionel Messi\",\n  \"totalWeightInKilos\" : 77,\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"classification\" : [ \"Normal\", \"Normal\" ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Patient>(exampleJson)
                        : default(Patient);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
